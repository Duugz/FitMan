Tech to figure out:
1. Basic Html buttons, inputs etc
2. Multipage dash apps
3. SQL Database
4. Bar Chart/Graph
 

Software Pages: 

Startup
Login - username password - grab from database  
Create - username password - inputs then add to database 

Menu 
- Logout
- Access Week ----> 'Complete Workout' Screen 
- edit scheduling --- goto schedule screen 
- graphing screen 

Select sports and activities - finish or back (buttons) 

Graphing Screen 
(DOT GRAPH)
Click to see date and activity on dot 

Back 

 

Stories--------------------------------



Story1: Add Exercise to ExerciseSummary for a user (with no database)
- Start application in Index page
- User clicks link to 'View my exercise'
- Application shows exercise summary page
- Table showing all exercises for said User
- This includes Type, Length, Intensity
- Sorted by date with the most recent at the top
- Shows all rows no matter how many (1 or 1000)
- User clicks 'add new exercise link/button' 
- The application shows a new exercise page 
- This 'new exercise' page has a cancel and submit button
- The date/time defaults to the current (may have date/time picker)
- To select exercise type, it will be in a drop down (to be defined)
- Exercise Types: Run, Swim, Socccer, Tennis, Basketball, Paddle, Boxing, Other
- Intensities: 1-10 slider
- User clicks button/link 'SaveExercise'
- Application creates new exercise in database table
- Popup 'exercise saved well done' 
- User is taken back to 'View my exercise' Screen
- Application displays new exercise on said page at the top (newest)
Steps for rob
1. Create a fresh project 'FitMan' [10 mins] - 2mins
2. Create Github account and add a project [1 hour] -10 mins
3. create database and move it into FitMan/database/fitman.sqbpro folder [10 mins] - 1 min
4. Create 3 python scripts index.py, exerciseSummary.py, createExercise.py,__init__.py 
Get application moving between page 1 ---> 2 ---> 3 and back

4.1 Index/ [20 mins] - 10 mins
4.2 exerciseSummary [20 mins] - 30 mins 
4.3 createExercise [20 mins] - 30 mins

---> REWORKED MULTIPAGE SYSTEM (took 15 mins)

5. Build createExercise screen with working UI (without database saving) 

5.1 Dropdown Menu with all fields [45 mins] - 25 mins
5.2 Date time fields [60 mins] - 20 mins
5.3 Intensity Slider [30 mins] - 30 mins
5.4 Submit Button (without database saving) calls back to exerciseSummary screen [30 mins] -10 mins
5.5 Cancel Button calls back to exerciseSummary screen [30 mins]-10 mins 

6. Build exerciseSummary page with pretend data

6.1 Investigate Datatables within Dash [1 hour] - 10 mins
6.2 Build data table using pretend data [30 mins] - 15 mins

Total for story1: [6.5 hours] Actually Took - 3.5 hours (reworking multipage system took longer than expected everything else was shorter)



Story1.1: View ExerciseSummary datatable with database data for a user 
Same as story 1 except
- Exercise summary only shows database entries
- User "rob" will be hardcoded (created using SQLbrowser)
Steps
1. Bring back real exercises from database to datatable in Exercise Summary 
- create a connection and bring data [15 mins]-[40 mins] (didn't know SQL and had to use error messages to sort row and get them)
- convert the format [40 mins] - [30mins]
Worked out this in SQLbrowser:
SELECT "ExerciseDate", "ExerciseType","Intensity","LengthMins" FROM Exercises WHERE "UserID" = "5" ORDER by ExerciseDate DESC
Original = 55mins
Actual = 1.25 hours
This was due to having to define layouts as functions to make sure that it would recall the database each time the page was displayed
Also I changed the way i call the database to use panda to get a dataframe which worked better with dash datatables

Story1.2: Save new exercise to database and see new data in table 
Same as story 1 except
- New exercises are saved to databases using "Submit" button
- Exercise summary only shows database entries
- User "rob" will be hardcoded (created using SQLbrowser)
Steps
1. Submit button calls SQL insert statement 
- Create callback with the Submit button - 5 mins [3 mins]
- Gather all field data [not sure how to/45 mins] [2 hours]
- Update database [30 mins] [3 hours]
INSERT INTO "main"."Exercises"
("ExerciseID", "UserID", "ExerciseDate", "ExerciseType", "Intensity", "LengthMins")
VALUES (1, 5, '05/02/2020', 'Run', 4, 15);
Because of the unknown factor with gathering field data, this story took me alot longer than originally planned 
Cleaned up callbacks script as well which took up about 45 mins
------Completed story 1-------------



Story2: User opens Graph of one month of exercises/time (Bar graph)
- User starts on Exercise Summary page and presses view graph button 
- User views bar for each day of exercise
- The x-axis will show dates (if dash can do it) or it can be just numbers 0-30
- The y-axis is a total number of minutes exercise (exerciseLength)
- No bar will appear with no exercise
- 1 exercise in the day will show the time in minutes of the singular exercises
- more than 1 exercise will show the time of multiple exercises added together
- If there are no exercises then it will show no graphs and a message saying "No exercises found!"
- The user can then click the "back" button to go back to the Exercise Summary page
Steps
1. Add a new page to layouts exerciseSummaryGraph [10 mins] -5 mins
2. Define the page layout as a function (so that we can show an error message) using the dcc.Graph [30 mins] - 20mins
3. Copy exerciseSummary, using the 'query data' that will specifcally get the dates and time in minutes from the database [40 mins] - 2.5 hours
4. Add the back button to the layout [3 mins] - 2mins
Overall Estimate time - 73 mins~
Overall for Story2 - 143 mins~

Testing the graph:
1. If a user has no exercises for a month
2. One exercise is added to the datatable
3. Multiple exercises within a day (adding)



Story3: A user logs into FitMan and can create an account in FitMan
- A user logs into FitMan
 






























































FUCK YOU - say when due to dad 
